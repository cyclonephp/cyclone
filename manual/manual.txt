@section cyclone-intro Introduction

CyclonePHP is a modern web application development framework designed to fit the needs
of enterprise application development. CyclonePHP is originally build on Kohana 3.0, but
currently it is not compatible with any version of Kohana.

The framework itself basically consists of a small - even optional - core library (or kernel),
and some loosely coupled libraries. The core library provides an autoloader, a request dispatcher 
and a good set of helper (utility) classes.

@section cyclone-install Installation

<p>CyclonePHP is available as a zip download at the official website and it can also be installed
via git. The zip package is better for newcomers who want to have a look at and try out CyclonePHP
since it is the easiest way to install it. Installing from git takes a bit more time and requires
git installed on your computer, but it is better for people who want to keep an eye on the development
of the framework and want to receive updates by simply running <code>git pull</code> without the
need of reinstalling the entire framework. The git install is also highly recommended for contributors.</p>

@subsection cyclone-install-requirements Requirements

<p>To install CyclonePHP you should at least the following software installed:
<ul>
    <li>PHP 5.3</li>
    <li>Apache2 (installation on other HTTP servers is of course possible but not yet documented</li>
    <li>The Apache AllowOverride directive is recommended to be turned on</li>
    <li>PHP CLI is optional but strongly recommended</li>
</ul>
</p>

@subsection cyclone-install-zip Installing from the zip package

<p>
Installing CyclonePHP from the zipball to an apache2 web server is as simple as possible:
<ol>
<li>download the zipball</li>
<li>extract it to your document root, for example to a <code>&lt;docroot&gt;/cyclonephp/</code>
directory.</li>
<li>point your web browser to <a href="http://localhost/cyclonephp/">http://localhost/cyclonephp/</a></li>
<li>If everything is ok then you should see a blank white page with the "Hello World" text.</li>
</ol>
</p>

<p>
<em>Troubleshooting: if you can see "Fatal error: Exception thrown without a stack frame in Unknown
on line 0" after "Hello World" then probably apache2 cannot write the internal cache file or the
<code>logs/</code> directory. On UNIX systems the simplest way to solve it is to run<br/>
<code>chmod -R a+w &lt;docroot&gt;/cyclonephp/app/{.cache,logs}</code><br/>
</em>
</p>

@subsection cyclone-install-git Installing from git

<p>
Brief instructions to install CyclonePHP to <code>http://localhost/cyclonephp/</code> on UNIX
systems, assuming that you use </code>/var/www/</code> as the apache document root:
<pre><code>
cd /var/www
mkdir -p cyclonephp/lib
cd cyclonephp/
# cloning the libraries
for i in cyclone CyForm DB JORK Logger; do git clone git://github.com/cyclonephp/$i.git lib/$i; done
# downloading some additional tools: PHPUnit integration and the API docs generator
for i in unittest CyDocs; do git clone git://github.com/cyclonephp/$i.git tools/$i; done
# copying the example index.php tracked in the cyclone lib to the root directory
cp lib/cyclone/example.index.php index.php
# copying the example apache .htaccess file tracked in the cyclone lib to the root directory
cp lib/cyclone/example..htaccess .htaccess
# copying the command-line interface
cp lib/cyclone/example.cyphp cyphp
</code></pre>
</p>

@subsection cyclone-postinstall Post-installation steps

<p><em>Note for Windows users: in the below commands <code>./cyphp</code> is used to boot the framework
 from the commandline. On Windows you will have to use <code>php.exe -f cyphp</code> instead.</em></p>

<p>
After downloading the framework try out the following commands from the installation root directory:<br/>
<code>./cyphp</code><br/>
If everything is properly installed then you will get the following output:
<code><pre>
Available libraries:
	system	 Core system commands of CyclonePHP
	docs	 Documentation generator tool for CyclonePHP
	jork	 JORK ORM command-line tools
	db	 The DB library is a low-level database abstraction layer for CyclonePHP
</pre></code></p>

<p>This output may be preceeded by a <em>PHP Fatal error:  Exception thrown without a stack frame in Unknown on line 0</em>
exception message. If you installed CyclonePHP from the zipball then just run
<code>sudo chmod -R a+w app/{.cache,logs}</code></p>

<p>If you installed CyclonePHP from git then you may notice that you don't have an <code>app/</code>
directory which may contain your application. Instead of creating it by hand you can execute<br/>
<code>./cyphp system initlib --app -d app</code><br/>
It will create the usual directory layout used by CyclonePHP applications.
Then maybe you will have to also execute<br/>
<code>sudo chmod -R a+w app/{.cache,logs}</code></p>

<p>
When you have a working CyclonePHP installation you can simply generate the manual and API
documentation of the downloaded libraries by executing<br/>
<code>./cyphp docs api -Lifo docs/</code><br/>
<em>Note: in the zipball package the documentation is included by default.</em>
To get detailed instructions about the documentation generator you can read about all options
by executing<br/>
<code>./cyphp docs help api</code>
</p>

@subsection cyclone-install-examples Installing the in-built examples

<p>The framework is shipped with some example codes for learning purposes which can be installed
using the CLI. To list the available examples run<br/>
<code>./cyphp system list-examples</code><br/>
To install an example (listed by the above command) run<br/>
<code>./cyphp system install-example -e &lt;example-name&gt; -d &lt;target-library&gt;</code><br/>
For example the hello-world example (which is contained by the zip package) can be installed by<br/>
<code>./cyphp system install-example -e cyclone/helloworld -d app</code></p>

@section cyclone-postinstall Brief overview of the downloaded contents

After downloading CyclonePHP you will find the following files and directories in it:
<ul>
	<li><code>index.php</code>: a general example for bootstrapping the framework</li>
	<li><code>cyphp</code>: the command-line interface of the framework.</li>
	<li><code>.htaccess</code>: an example apache .htaccess file for using the framework.</li>
	<li><code>libs/</code>: official libraries of the framework including the </li>
	<li><code>tools/</code>: in general, the <code>tools/</code> directory also contains libraries,
		but these libraries are development tools, not really libraries that can be used by your
		application itself.</li>
	<li><code>app/</code> an example application directory structure containing a hello-world controller.</li>
</ul>

The directory layout of each library (including the core lib) may contain the following
subdirectories:
<ul>
	<li><code>assets/</code>: contains javascript files and stylesheets, maybe optional images too</li>
	<li><code>config/</code>: holds configuration files. By default, configuration files are <code>.php</code>
		files that return configuration data as PHP arrays.</li>
	<li><code>classes/</code>: you can think about the <code>classes/</code> directory of a library
		as the root directory of a PSR-0 compliant class library. All the official classes of the framework
		are under the <code>cyclone</code> namespace, so all the <code>classes/</code> directories of the
		libraries contain a <code>cyclone</code> subdirectory and nothing else. More about the class loading
		later.</li>
	<li><code>i18n/</code>: contains internationalization config files, also as PHP arrays. More about it later.</li>
	<li><code>views/</code>: contains HTML template files.</li>
	<li><code>init.php</code>: this file can contain some procedural bootstrap code for the library,
		executed on each request. In most cases, these only contain some minimal code.</li>
	<li><code>cli.php</code>: in this file the library can declare its own commands that can be
		executed from the command line. Mainly libraries under the <code>tools/</code> utilize this feature.</li>
</ul>

Above these examples the libraries can have any other subdirectories and files too.

The application itself is handled by the framework as a library too, so generally the <code>app/</code>
directory will have a similar directory layout as the other libraries, but by default it contains 3 additional
directories and files:
<ul>
	<li><code>.cache/</code>: used to store some framework metadata</li>
	<li><code>logs/</code>: used by the default log adapter (writer) to write the log messages.
	<li><code>config/setup.php</code>: the configuration of the configuration handler</li>
</ul>

If you don't change the default configuration of the logger and the FileSystem class (see below), then both
directories must be writable by PHP.

@subsection cyclone-bootstrap bootstrap

The framework bootstrap is done by some procedural code, which typically exists in the <code>index.php</code>
of the framework. In the <code>index.php </code> you can see the followings:
<ul>
	<li>few constant declarations</li>
	<li>autoloader setup</li>
	<li>a library loading method call (see the next chapter for details)</li>
	<li>some further initialization and environment setup</li>
	<li>a request dispatching</code>
</ul>

The configuration of the framework is mainly done in configuration files, but partly in the <code>index.php</code>
programmatically.

Please note that the <code>index.php</code> is really just an example, you can have really
different bootstrap codes in your application. The constants and the library bootstrap will
be needed for sure, but the request dispatch can simply be omitted eg. if you want to use some of the
libraries of the framework in a project built on an other framework or CMS.

@subsection cfs The cascading file system

<p>The cascading file system (CFS) has the same meaning in CyclonePHP as in Kohana. In short, when the framework
searches for a file given by its relative path, it iterates on the loaded libraries, and checks
if the relative path exists in the root directory of the library. The result of the search will be cached
and stored in the <code><application-root-path>app/.cache/filepaths.txt</code>. See the
@c cyclone\FileSystem::bootstrap() method for more details. The method must be called in the index.php,
its first argument is an associative array of library name => library root path pairs, and the second
argument is the path of the cache directory. In the first argument, it's recommended to pass the root
directory of your application as the first array item.</p>

<p>The cascading file system has some side effects. First of all, in your application you can override the files
of the libraries, or even libraries can rewrite the files of other libraries by loading them before
the library then want to override. This behavior works very well on configuration files, or even
forms, HTML templates, assets, etc, by taking the advantage of CFS you can easily build highly customizable
libraries. See @c cyclone\FileSystem::find_file() for more details.</p>

<p>The CFS also lets you to override classes of libraries, but it is not recommended, in a properly designed
OO system it shouldn't be needed, so overriding class declarations is only to be used if nothing else works.</p>

@section req-exec Request execution flow

CyclonePHP is an action-based framework, and as in all such frameworks, the first step is dispatching
the incoming HTTP request. It means deciding based on the request details what code should be executed, then
dispatching the execution to a function or method. This function is called controller and/or action. The implementation
of the controller is the task of the programmer, this is the point where the application-specific processing
of the request starts. Most PHP frameworks are action-based, therefore if CyclonePHP is not the first framework
you use, then you are probably familiar with the theory of request dispatching.

The first step of the request dispatching process is setting up your routes. A route in general a pattern,
that a HTTP request can match or not. The most important part of a route is its URI pattern, which is a regex-like
string that contains some parameters, which will be passed to the controller. A route can have other constraints to be
checked against a request, for example the HTTP method, or the request protocoll.

When you set up your routes, you can set up multiple routes just after each other. When the framework searches for a matching
route, it iterates over the set up routes, and the first matching route will be the matching route - therefore it is 
important to take care about the ordering of your routes. The route setup is done in most cases programmatically 
in the <code>index.php</code>, let's see an example:
@code
use cyclone\request as req;

	req\Route::set('default', '(<controller>(/<action>(/<id>)))')
        ->defaults(array(
			'namespace' => 'myapp\\controller',
            'controller' => 'index',
            'action' => 'index',
        ));
@endcode
This route named "default" has an URI pattern with 3 optional parameters. All parameter names should be between
&lt; and &gt;, and putting them between ( and ) makes them optional. After the <code> req\Route::set() </code> call you can
pass the default values of the optional parameters, and you can add further route constraints by method chaining (in the
example above we didn't). Furthermore, you can set up a callback using @c cyclone\request\Route::before() which will
be executed only when the route matches a request, and the URI parameters are already extracted from the URI. We will see
a use-case of this callback later.

If a route matches a cyclone\request\Request instance, then the parameters extracted from the request URI will be stored
in the array @c cyclone\request\Request::$params . In your controller, you will be able to access the Request instance
and its URI parameters too, that's why the route URI pattern and its parameters are important and an essential part of
the framework. By using the route parameters for passing data it's very easy to create user-friendly URL-s for your
application.

After the matching route has been found and the URI parameters have been extracted, the request will be
dispatched to a controller, this is done by @c cyclone\request\InternalDispatcher::dispatch() (note: in the <code>index.php</code>
you can see <code>$request->execute()</code> but in general it just calls the <code>dispatch()</code> method.

The <code>InternalDispatcher::dispatch($strategy)</code> method accepts a parameter which should be
<code>InternalDispatcher::STRATEGY_DEFAULT</code> or <code>InternalDispatcher::STRATEGY_QUERY</code>
or <code>InternalDispatcher::STRATEGY_LAMBDA</code>.
Based on this parameter a default dispatching or a lambda dispatching will be performed. In most cases
you will likely use the default strategy, which will create an instance of a so-called controller class,
and will execute one of its action methods - this is where your code comes.

@subsection cyclone-request-internal-default The default internal dispatcher

If you want to dispatch a request using the default dispatching strategy, then after the route matching
the request should have 2 mandatory URI parameters: <code>controller</code> and <code>action</code>. Both
of these parameters can be defined in the URI pattern of the route, and/or can be set up as default route parameters.
If any of these request parameters are missing, the dispatcher will throw a @c cyclone\request\DispatcherException .
It's not mandatory but strongly recommended to put your controller classes into a namespace, to do that, you
will have to have a request parameter <code>namespace</code> too - see the above example.

Let's take an incoming HTTP request with a request URI <code>/user/view</code>.


Using these request parameters, the dispatcher will 
<ul>
	<li>instantiate the controller class. In our example, it will be <code>myapp\controller\<b>User</b>Controller</code>.
		This class should be a subclass of @c cyclone\request\SkeletonController otherwise a @c cyclone\request\DispatcherException will be thrown.</li>
	<li>call the <code>before()</code> method of the controller</li>
	<li>call the action method of the controller. In our example, the expected name of the
		action method will be <code>action_<b>view</b></code></li>
	<li>call the <code>after()</code> method of the controller</li>
</ul>

In the action method you can access the <code>Request</code> object can be accessed using the <code>$this->_request</code> or
<code>$this->_req</code> references. The <code>Response</code> object can be accessed using the
<code>$this->_response</code> or <code>$this->_resp</code> references (or <code>$this->_request->get_response()</code>
will be the same object too). In general that's all what the @c cyclone\request\SkeletonController class
provides, you can access the incoming request data using the request instance, and you should write
the response headers and body into the response instance which will be flushed when the control flow
returns to <code>index.php</code>. Let's see a hello-world example:

@code
<?php

namespace app\controller;

use cyclone as cy;
use cyclone\request;

class IndexController extends request\SkeletonController {
	
	public function action_index() {
		$name = isset($this->_req->query['name']) ? $this->_req->query['name'] : 'world';
		$this->_resp->body('hello ' . $name);
	}
	
}
@endcode

As you can see the <code>SkeletonController</code> in fact doesn't provide any functionality, it just
helps to put together the request-controller-response triad in an OO context. In most cases it is recommended
to use the @c cyclone\request\BaseController class as the subclass of the concrete controller classes.
See the API docs for more details. Furthermore it's recommended to create a general
ancestor controller for the application to handle application-specific (but general
at the application-level) tasks.

@subsection cyclone-request-int-query The query-parameter based internal dispatcher

The query-based internal request dispatcher (indicated by <code>InternalDispatcher::STRATEGY_QUERY</code>)
is very similar to the default dispatcher. The only difference if that it picks
the controller namespace, classname and action method name parameters from the query
parameters (<code>$_GET</code>) and not from the routing parameters. The route
matching process is omitted at all which can be useful in 2 cases:
<ul>
    <li>your task is to re-write a legacy web application that used some sort
    of query parameter-based routing and the new application should support the
    legacy URL-s</li>
    <li>dispatching ajax requests using the query-based dispatcher can make sense
    since it's a bit faster (no regex matching) and it doesn't have any disadvantage
    (the URLs of ajax requests don't have to be SEO-friendly).</li>
</ul>

Examples:

<em>TODO</em>

@subsection cyclone-request-int-lambda The lambda-based internal dispatcher

The CyclonePHP core also includes a lambda function-based request dispatcher which
lets you use CyclonePHP in a MicroMVC style. MicroMVC frameworks are fairly new
in the web development world and in fact anyone hasn't written a more or less
exact definition of what is a MicroMVC framework. In general these frameworks have
the following common features:
<ul>
    <li>their key concept is to dispatch the request execution to a lambda function</li>
    <li>they are designed to be much faster then most heavyweight web frameworks</li>
    <li>the lambda controllers are tightly coupled with the route definitions</li>
</ul>

In CyclonePHP to dispatch a request using the lambda dispatcher you need to call its <code>execute()</code>
method this way:
@code
    use cyclone\request as req;
    // ...
    $request->execute(req\InternalDispatcher::STRATEGY_LAMBDA);
@endcode

Alternatively if you use mainly lambda controllers in your application then it is
better to set the default dispatching strategy to lambda in your bootstrap:
@code
    use cyclone\req;

    req\InternalDispatcher::$default_strategy = req\InternalDispatcher::STRATEGY_LAMBDA;
    // ...
    $request->execute();
@endcode

Creating lambda controllers is basically about setting the <code>controller</code>
property of the @c cyclone\request\Route instances. The value of this property should
be a lambda function that takes the incoming @c cyclone\request\Request instance
as its only parameter. This controller function will be executed if the request
is dispatched using the <code>cyclone\request\InternalDispatcher::STRATEGY_LAMBDA</code> 
strategy and it (the request) matches the given route. The task of this function
is to create the response for the request, which means populating the properties
of the @c cyclone\request\Response instance which can be obtained by calling
@c cyclone\request\Request::get_response() . Example:
@code
// index.php
use cyclone as cy;
use cyclone\request as req;

// other bootstrap code here
// ...
// Setting the default dispatching strategy to the lamdba strategy
req\InternalDispatcher::$default_strategy = req\InternalDispatcher::STRATEGY_LAMBDA;

// Setting up the default route with the lamda controller
req\Route::set('hello', 'hello/<name>')
    ->controller(function($req) {
        $req->get_response()->body('Hello ' . $req->params['name']);
    });

req\Request::initial()->execute();
@endcode

In this example we simply set the response body to a string. In most cases
you will need to use a @c cyclone\view\AbstractView instance or a JSON-encoded
array.

That's all to be known about the lambda dispatcher. Keep in mind that using this
dispatcher is mainly useful at application prototyping and for providing mock data
for UI demos. For complex applications it is <b>not</b> recommended, since it
messes up the route definitions with the controllers - all defined as the part of
the bootstrap mechanism.

@section cyclone-cli The CLI API

The CyclonePHP core lets the libraries define their related command-line tasks
in a common way. The command-line tasks shipped by the libraries are mainly development
tools like the API docs generator. Your application (which is just a library too)
will probably define other types of CLI tasks, mainly scheduled tasks executed by the
system scheduler - such cron-jobs are an essential parts of most web applications.
The CyclonePHP CLI API provides a common way to define these CLI tasks, including
their parameters and help texts. The CLI tasks are defined using a simple associative
array based DSL. Every library can define its CLI tasks in a file named <code>cli.php</code>
in its root directory. Let's see the <code>cli.php</code> of the CyDocs tool to examine
what can be defined in a <code>cli.php</code> and how:
@code
<?php

use cyclone as cy;

return array(
    // every cli.php assoc. array should have exactly one key with the name of the
    // library.
    'docs' => array(
        // The 'descr' or 'description' key stores a short description of the library
        'descr' => 'Documentation generator tool for CyclonePHP',
        // The 'commands' array will store the CLI commands provided by the library
        'commands' => array(
            // In this case or first (and only) command is 'api'
            'api' => array(
                // The 'descr' key holds the brief description of the command
                'descr' => 'generates API docs for the classes in the enables libraries',
                // The callback holds a callable which will be called by the CLI API
                // when the command is executed. The actual values of the
                // subsequent arguments will be passed as an associative array.
                'callback' => array(cy\Docs::inst(), 'cli_api_bootstrap'),
                // The 'arguments' array holds the definitions of the command arguments
                'arguments' => array(
                    // The array keys will be the names of the arguments
                    '--output-dir' => array(
                        // a shorter alias can be optionally defined
                        'alias' => '-o',
                        // the default value of the argument
                        'default' => cy\SYSROOT . 'docs/',
                        // the formal name of the argument which will be displayed
                        // in the help text. If this 'parameter' key is missing
                        // from the argument definition or its value is NULL then
                        // the argument will be treated as a flag and the CLI API
                        //  won't accept actual value for this parameter.
                        'parameter' => '<output-dir>',
                        // a description of the argument
                        'descr' => 'the root directory of the generated documentation'
                    ),
                    // ...further arguments
                    '--internal' => array(
                        'alias' => '-i',
                        'default' => FALSE,
                        'parameter' => NULL,
                        'descr' => 'include internal documentation too (recommmended for people who develop CyclonePHP itself)'
                    ),
                    '--lib' => array(
                        'parameter' => '<libraries>',
                        'alias' => '-l',
                        'descr' => 'a comma-separated list of libraries that\'s docs should be generated. all stands for all libs (including the application)',
                        'default' => 'all'
                    ),
                    '--stylesheet' => array(
                        'parameter' => '<path>',
                        'alias' => '-s',
                        'descr' => 'the stylesheet file that should be applied to the output',
                        'default' => cy\FileSystem::get_root_path('cydocs') . 'assets/css/cydocs/default.css'
                    ),
                    '--pdf' => array(
                        'alias' => '-p',
                        'default' => FALSE,
                        'descr' => 'flag marking that PDF output should be generated instead of HTML',
                        'parameter' => NULL
                    ),
                    '--forced' => array(
                        'parameter' => NULL,
                        'default' => FALSE,
                        'alias' => '-f',
                        'descr' => 'the generator removes all existing docs directories if passed'
                    ),
                    '--measure' => array(
                        'parameter' => NULL,
                        'default' => FALSE,
                        'alias' => '-m',
                        'descr' => 'flag marking if the execution time and memory usage'
                    ),
                    '--title' => array(
                        'parameter' => '<title>',
                        'alias' => '-t',
                        'default' => '',
                        'descr' => 'The title of the generated documentation. Only used if the generation goes for multiple libraries.'
                    ),
                    '--preface' => array(
                        'parameter' => '<html-file-containing-preface>',
                        'alias' => '-p',
                        'default' => FALSE,
                        'descr' => 'The main page of the output. Only used if the generation goes for multiple libraries.'
                    ),
                    '--line-numbers' => array(
                        'parameter' => NULL,
                        'alias' => '-L',
                        'descr' => 'show line numbers o code examples'
                    )
                )
            )
        )
    )
);
@endcode

The CLI tasks can be executed using the <code>cyphp</code> script in the root
directory of the CyclonePHP installation. Example usages:
<ol>
    <li>Listing the installed libraries with CLI tasks:<br/>
        <code>./cyphp help</code></li>
    <li>Listing the CLI commands of the <code>docs</code> library:<br/>
        <code>./cyphp docs help</code></li>
    <li>Listing the available arguments of the <code>api</code> task of the
        <code>docs</code> library:<br/>
        <code>./cyphp docs help api</code></li>
     <li>Executing the <code>api</code> command of the <code>docs</code> library:<br/>
        <code>./cyphp docs api --line-numbers --internal --forced --output-dir /tmp/cydocs/</code></li>
     <li>Using argument aliases:<br/>
        <code>./cyphp docs api -L -i -f -o /tmp/cydocs/</code></li>
     <li>Using compact argument aliases:<br/>
        <code>./cyphp docs api -Lifo /tmp/cydocs/</code></li>
</ol>


